/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface YIDFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allContracts"
      | "deployUserContract"
      | "getAllContracts"
      | "getContractCount"
      | "getUserContract"
      | "hasUserContract"
      | "owner"
      | "renounceOwnership"
      | "totalContracts"
      | "transferOwnership"
      | "userContracts"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "UserContractDeployed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployUserContract",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userContracts",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployUserContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userContracts",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserContractDeployedEvent {
  export type InputTuple = [
    user: AddressLike,
    contractAddress: AddressLike,
    name: string
  ];
  export type OutputTuple = [
    user: string,
    contractAddress: string,
    name: string
  ];
  export interface OutputObject {
    user: string;
    contractAddress: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface YIDFactory extends BaseContract {
  connect(runner?: ContractRunner | null): YIDFactory;
  waitForDeployment(): Promise<this>;

  interface: YIDFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allContracts: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  deployUserContract: TypedContractMethod<
    [_name: string, _email: string],
    [string],
    "nonpayable"
  >;

  getAllContracts: TypedContractMethod<[], [string[]], "view">;

  getContractCount: TypedContractMethod<[], [bigint], "view">;

  getUserContract: TypedContractMethod<[_user: AddressLike], [string], "view">;

  hasUserContract: TypedContractMethod<[_user: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalContracts: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userContracts: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allContracts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "deployUserContract"
  ): TypedContractMethod<
    [_name: string, _email: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllContracts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getContractCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserContract"
  ): TypedContractMethod<[_user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "hasUserContract"
  ): TypedContractMethod<[_user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalContracts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userContracts"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UserContractDeployed"
  ): TypedContractEvent<
    UserContractDeployedEvent.InputTuple,
    UserContractDeployedEvent.OutputTuple,
    UserContractDeployedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UserContractDeployed(address,address,string)": TypedContractEvent<
      UserContractDeployedEvent.InputTuple,
      UserContractDeployedEvent.OutputTuple,
      UserContractDeployedEvent.OutputObject
    >;
    UserContractDeployed: TypedContractEvent<
      UserContractDeployedEvent.InputTuple,
      UserContractDeployedEvent.OutputTuple,
      UserContractDeployedEvent.OutputObject
    >;
  };
}
